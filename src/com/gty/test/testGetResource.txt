tomcat内部过滤器采用了责任链的设计模式,

Tomcat的过滤器主要由Filter、FilterChain组成，FilterChain包含一个Filter数组.当Wrapper执行FilterChain的doFilter(request,response)方法时，FilterChain首先调用第一个Filter的doFilter(request,response,filterchain)方法，当第一个filter做完过滤操作后，它又会调用filterchain的doFilter方法，此时filterchain的当前filter已变为第二个filter，第二个filter又执行dofilter方法，依此类推，直至所有过滤器都执行完毕。

public interface Filter {   
        .....          
        //执行过滤   
        public void doFilter ( ServletRequest request, ServletResponse response, throws IOException, ServletException;   
  
}   
  
public interface FilterChain {   
    public void doFilter ( ServletRequest request, ServletResponse response ) throws IOException, ServletException;   
} 

FilterConfig接口检索过滤器名、初始化参数以及活动的Servlet上下文。ApplicationFilterConfig是其实现类

ApplicationFilterChain在catalina.jar的org.apache.catalina.core包中

class ApplicationFilterChain implements FilterChain {   
..................
   private ApplicationFilterConfig[] filters = new ApplicationFilterConfig[0];
  private int pos = 0;
  private int n = 0;
   //pos为当前filter的所在位置,n为filters数组的长度   
   if (pos < n) {   
            //pos++执行后，把filterchain的当前filter指向下一个   
            ApplicationFilterConfig filterConfig = filters[pos++];   
            Filter filter = null;   
            try {   
                filter = filterConfig.getFilter();   
  
                //filter执行过滤操作   
                filter.doFilter(request, response, this);   
            }   
            ...   
   }   
}  

实例如下：

class SampleFilter implements Filter {   
      ........   
      public void doFilter(ServletRequest request, ServletResponse response,FilterChain chain)   
        throws IOException, ServletException {   
         //do something    
         .....   
         //request, response传递给下一个过滤器进行过滤   
         chain.doFilter(request, response);   
    }   
         
}